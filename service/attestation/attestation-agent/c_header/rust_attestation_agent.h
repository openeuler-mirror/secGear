/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_ATTESTATION_AGENT__
#define __RUST_ATTESTATION_AGENT__
#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** <No documentation available> */
void
free_rust_vec (
    Vec_uint8_t vec);


#include <stdbool.h>

/** \brief
 *  Simplified for lighter documentation, but the actual impls
 *  range from `Tuple1` up to `Tuple6`.
 */
typedef struct Tuple2_bool_bool {
    /** <No documentation available> */
    bool _0;

    /** <No documentation available> */
    bool _1;
} Tuple2_bool_bool_t;

/** <No documentation available> */
Vec_uint8_t
get_report (
    Vec_uint8_t const * c_challenge,
    Tuple2_bool_bool_t const * c_ima);

/** <No documentation available> */
Vec_uint8_t
verify_report (
    Vec_uint8_t const * c_challenge,
    Vec_uint8_t const * report);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_ATTESTATION_AGENT__ */
