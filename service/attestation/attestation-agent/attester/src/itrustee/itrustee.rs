/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ra_buffer_data {
    pub size: ::std::os::raw::c_uint,
    pub buf: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ra_buffer_data() {
    const UNINIT: ::std::mem::MaybeUninit<ra_buffer_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ra_buffer_data>(),
        16usize,
        concat!("Size of: ", stringify!(ra_buffer_data))
    );
    assert_eq!(
        ::std::mem::align_of::<ra_buffer_data>(),
        8usize,
        concat!("Alignment of ", stringify!(ra_buffer_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ra_buffer_data),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ra_buffer_data),
            "::",
            stringify!(buf)
        )
    );
}

#[link(name = "qca")]
extern "C" {
    pub fn RemoteAttest(
        in_: *mut ra_buffer_data,
        out: *mut ra_buffer_data,
    ) -> ::std::os::raw::c_uint;
}
