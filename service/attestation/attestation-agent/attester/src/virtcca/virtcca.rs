/* automatically generated by rust-bindgen 0.69.4 */
#[allow(non_camel_case_types)]
pub type wchar_t = ::std::os::raw::c_int;
#[allow(dead_code)]
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsi_ctx {
    pub fd: wchar_t,
}
#[test]
fn bindgen_test_layout_tsi_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<tsi_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tsi_ctx>(),
        4usize,
        concat!("Size of: ", stringify!(tsi_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<tsi_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(tsi_ctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tsi_ctx),
            "::",
            stringify!(fd)
        )
    );
}

#[link(name = "vccaattestation")]
extern "C" {
    pub fn tsi_new_ctx() -> *mut tsi_ctx;
}
extern "C" {
    pub fn tsi_free_ctx(ctx: *mut tsi_ctx);
}
extern "C" {
    #[allow(dead_code)]
    pub fn get_version(ctx: *mut tsi_ctx, major: *mut wchar_t, minor: *mut wchar_t) -> wchar_t;
}
extern "C" {
    pub fn get_attestation_token(
        ctx: *mut tsi_ctx,
        challenge: *mut ::std::os::raw::c_uchar,
        challenge_len: usize,
        token: *mut ::std::os::raw::c_uchar,
        token_len: *mut usize,
    ) -> wchar_t;
}
extern "C" {
    pub fn get_dev_cert(
        ctx: *mut tsi_ctx,
        dev_cert: *mut ::std::os::raw::c_uchar,
        dev_cert_len: *mut usize,
    ) -> wchar_t;
}
